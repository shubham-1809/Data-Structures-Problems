1. IMPLEMENT A GRAPH USING ADJACENCY MATRIX:

#include <iostream>

using namespace std;

int main()
{
    int n, m;
    cin >> n >> m; 
    int adj[n + 1][n + 1];
    for(int i = 0; i< m; i++){
        int u, v;
        cin >> u >> v;
        adj[u][v] = 1;
        adj[v][u] = 1;
    }
}

2. IMPLEMENT A GRAPH USING ADJACENCY LIST:

#include <iostream>
#include <vector>

using namespace std;

int main()
{
    int n, m;
    cin >> n >> m;
    vector<pair<int, int>> adj[n + 1];
    
    for(int i = 0; i< m; i++){
        int u, v, wt;
        cin >> u >> v >> wt;
        adj[u].push_back({v, wt});
        //adj[v].push_back(u);
    }
    // printing graph
    for(int i = 1; i<= n; i++){
        cout<< i;
        for(auto j : adj[i]){
            cout<<"->" << j ;
        }
        cout<<endl;
    }
    return 0;
}

3. IMPLEMENT A BFS TRAVERSAL:

#include <iostream>
#include <unordered_map>
#include <list>
#include <vector>
#include <queue>

using namespace std;

void bfsTraversal(unordered_map<int, list<int>> &adj, vector<bool> &visited, int vertex, vector<int> &ans){
    queue<int> q;
    q.push(vertex);
    visited[vertex] = true;
    
    while(!q.empty()){
        int node = q.front();
        q.pop();
        ans.push_back(node);
        // process neighbouring nodes
        for(auto i : adj[node]){
            if(!visited[i]){
                q.push(i);
                visited[i] = true;
            }
        }
    }
}

int main()
{
    // prepare adj list
    int v, m;
    cout<<"vertex: "<<endl;
    cin >> v;
    cout<<"edges: "<<endl;
    cin>> m;
    unordered_map<int, list<int>> adj;
    for(int i = 1; i<= m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin >> u;
        cout<<"second vertex: "<<endl;
        cin >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    // performing BFS traversal
    vector<bool> visited(v, false);
    vector<int> ans;
    for(int i = 0; i< v; i++){
        if(!visited[i]){
            bfsTraversal(adj, visited, i, ans);
        }
    }
    for(auto i : ans)
        cout<<i<<" ";
    return 0;
}

4. IMPLEMENT A DFS TRAVERSAL:

#include <bits/stdc++.h>

using namespace std;

void dfsTraversal(int vertex, vector<bool> &visited, unordered_map<int, list<int>> adj, vector<int> &ans){
    visited[vertex] = true;
    ans.push_back(vertex);
    // neighbouring nodes
    for(auto i : adj[vertex]){
        if(!visited[i])
            dfsTraversal(i, visited, adj, ans);
    }
}

int main()
{
    // creating adj list
    int v, m;
    cout<<"vertices: "<<endl;
    cin>> v;
    cout<<"edges: "<<endl;
    cin>> m;
    unordered_map<int, list<int>> adj;
    for(int i = 1; i <= m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin>> u;
        cout<<"second vertex: "<<endl;
        cin>> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    // performing dfs traversal
    vector<bool> visited(v, false);
    vector<int> ans;
    for(int i = 1; i<= v; i++){
        if(!visited[i])
            dfsTraversal(i, visited, adj, ans);
    }
    // printing dfs Traversal
    for(auto i : ans)
        cout<< i<<" ";
    return 0;
} 

5. FIND CYCLE IN AN UNDIRECTED GRAPH USING DFS TRAVERSAL:

#include <bits/stdc++.h>

using namespace std;

// FOR UNDIRECTED GRAPH WE WILL USE A PREV NODE VARIABLE SO THAT WHILE CALLING RECURSION ON VISITED ADJ PREV NODE WE DON'T GET CONFUSE WITH THE CYCLE OF PREV NODE BECAUSE WE ARE REACHING CURR NODE WITH THAT PEV NODE ONLY.  
bool findCycleDfsTraversal(int vertex, int prev, vector<bool> &visited, unordered_map<int, list<int>> adj){
    visited[vertex] = true;
    // neighbouring nodes
    for(auto i : adj[vertex]){
        if(!visited[i]){
            if(findCycleDfsTraversal(i, vertex, visited, adj))  
                return true;
        }
	// VERY IMP CONDITION
        else if(i != prev)
            return true;
    }
    return false;
}

int main()
{
    // creating adj list
    int v, m;
    cout<<"vertices: "<<endl;
    cin>> v;
    cout<<"edges: "<<endl;
    cin>> m;
    unordered_map<int, list<int>> adj;
    for(int i = 1; i <= m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin>> u;
        cout<<"second vertex: "<<endl;
        cin>> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    // performing cycle detection dfs traversal
    vector<bool> visited(v, false);
    for(int i = 1; i<= v; i++){
        if(!visited[i]){
            if(findCycleDfsTraversal(i, -1, visited, adj)){
                cout<<"true";
                exit(0);
            }
        }
    }
    cout<<"false";
    return 0;
}

6. FIND CYCLE IN AN UNDIRECTED GRAPH USING BFS TRAVERSAL:

#include <bits/stdc++.h>

using namespace std;

// HERE WE ARE STORING PREV NODE AND CURR NODE INSIDE A PAIR OF QUEUE... REST SAME THOUGHT PROCESS AS ABOVE QUESTION 
bool check(int vertex, vector<bool> &visited, unordered_map<int, list<int>> adj){
    queue<pair<int, int>> q;
    q.push(make_pair(vertex, -1));
    visited[vertex] = true;
    
    while(!q.empty()){
        int node = q.front().first;
        int prev = q.front().second;
        q.pop();
        for(auto i : adj[node]){
            if(!visited[i]){
                q.push(make_pair(i, node));
                visited[i] = true;
            }
	    // VERY IMP CONDITION	
            else if(i != prev)
                return true;
        }
    }
    return false;
}

int main()
{
    // creating adj list
    int v, m;
    cout<<"vertices: "<<endl;
    cin>> v;
    cout<<"edges: "<<endl;
    cin>> m;
    unordered_map<int, list<int>> adj;
    for(int i = 1; i <= m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin>> u;
        cout<<"second vertex: "<<endl;
        cin>> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    // performing cycle detection bfs traversal
    vector<bool> visited(v, false);
    for(int i = 0; i< v; i++){
        if(!visited[i]){
            if(check(i, visited, adj)){
                cout<<"true";
                exit(0);
            }
        }
    }
    cout<<"false";
    return 0;
}

7. CHECK A BIPARTITE GRAPH USING DFS TRAVERSAL(GRAPH COLORING PROBLEM):

#include <bits/stdc++.h>

using namespace std;

// NO TWO ADJ NODES HAVING SAME COLOR
bool checkUsingDfs(int vertex, vector<int> &color, unordered_map<int, list<int>> &adj){
    if(color[vertex] == -1) color[vertex] = 1;
    // check for adjacent nodes using DFS
    for(auto i : adj[vertex]){
        if(color[i] == -1){
            color[i] = 1 - color[vertex];
	    // THESE NOT CONDITION IN IF IS VERY IMPORTANT	
            if(!checkUsingDfs(i, color, adj)) 
                return false;
        }
        else if(color[i] == color[vertex]) 
            return false;
    }
    return true;
}

bool checkBipartite(int v, unordered_map<int, list<int>> &adj){
    vector<int> color(v, -1);
    for(int i = 1; i<= v; i++){
        if(color[i] == -1){
	    // THESE NOT CONDITION IN IF IS VERY IMPORTANT(IF ANY COMPONENT RETURN FALSE THEN ENTIRE GRAPH IS NOT A BIPARTITE GRAPH)
            if(!checkUsingDfs(i, color, adj))
                return false;
        }
    }
    return true;
}

int main()
{
    // creating adj list
    int v, m;
    cout<<"vertices: "<<endl;
    cin>> v;
    cout<<"edges: "<<endl;
    cin>> m;
    unordered_map<int, list<int>> adj;
    for(int i = 1; i <= m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin>> u;
        cout<<"second vertex: "<<endl;
        cin>> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    // performing bipartite check dfs traversal
    cout<<checkBipartite(v, adj);
    
    return 0;
}

8. CHECK A BIPARTITE GRAPH USING BFS TRAVERSAL:

#include <bits/stdc++.h>

using namespace std;

bool checkUsingBfs(int node, vector<int> &color, unordered_map<int, list<int>> &adj){
    queue<int> q;
    q.push(node);
    color[node] = 1;
    while(!q.empty()){
        int val = q.front();
        q.pop();
        for(auto i : adj[val]){
            if(color[i] == -1){
                color[i] = 1 - color[val];
                q.push(i);
            }
            else if(color[i] == color[val])
                return false;
        }
    }
    return true;
}

bool checkBipartite(int v, unordered_map<int, list<int>> &adj){
    vector<int> color(v, -1);
    for(int i = 0; i< v; i++){
        if(color[i] == -1){
	    // THESE NOT CONDITION IN IF IS VERY IMPORTANT	
            if(!checkUsingBfs(i, color, adj))
                return false;
        }
    }
    return true;
}

int main()
{
    int v, m;
    cout<<"vertex: "<<endl;
    cin>>v;
    cout<<"edges: "<<endl;
    cin>>m;
    unordered_map<int, list<int>> adj;
    for(int i = 1; i<= m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin>>u;
        cout<<"second verex: "<<endl;
        cin>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    cout<<checkBipartite(v, adj);

    return 0;
}


9. DETECT A CYCLE IN DIRECTED GRAPH USING DFS TRAVERSAL:

#include <bits/stdc++.h>

using namespace std;

// HERE IT IS DIFFERENT FROM UNDIRECTED GRAPH CYCLE DETECTION USING DFS IN SUCH A WAY THAT IF ADJ NODE 'I' IN FOR EACH LOOP IS TRUE AND DFS VISIT VECTOR OF 'I' IS ALSO TRUE THEN THERE IS CYCLE. DFS VISIT VECTOR SIGNIFIES THAT THE ADJ NODE 'I' HAS ALREADY BEEN MARKED TRUE IN EARLIER RECURSION CALLS WHICH MEANS SOMEONE WOULD HAD EARLIER VISITED IT AND NOW AGAIN WE ARE VISITING IT IN CURRENT RECURSION CALL WHICH MEANS THERE IS A CYCLE.  
bool checkCycle(int vertex, vector<bool> &visited, vector<bool> &dfsVis, unordered_map<int, list<int>> &adj){
    visited[vertex] = true;
    dfsVis[vertex] = true;
    // process adjacent nodes in dfs manner
    for(auto i : adj[vertex]){
        if(!visited[i]){
            if(checkCycle(i, visited, dfsVis, adj))
                return true;
        }
        else if(dfsVis[i])
            return true;
    }
    // BACKTRACKING LOGIC
    dfsVis[vertex] = false;
    return false;
}

int main()
{
    // prepare a directed graph
    int v, m;
    cout<<"vertices: "<<endl;
    cin>> v;
    cout<<"edges: "<<endl;
    cin>> m;
    unordered_map<int, list<int>> adj;
    for(int i = 1; i<= m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin>> u;
        cout<<"second vertex: "<<endl;
        cin>> v;
        adj[u].push_back(v);
    }
    // detect cycle using dfs
    vector<bool> visited(v, false);
    vector<bool> dfsVis(v, false);
    for(int i = 1; i<= v; i++){
        if(!visited[i]){
            if(checkCycle(i, visited, dfsVis, adj)){
                cout<<"present";
                exit(0);
            }
        }
    }
    cout<<"not present";

    return 0;
}

10. TOPOLOGICAL SORT OF A DIRECTED GRAPH USING DFS TRAVERSAL(CODE IS CORRECT BUT STILL GIVING ERROR):

#include <bits/stdc++.h>

using namespace std;

void topologicalSort(int vertex, vector<bool> &visited, stack<int> &st, unordered_map<int, list<int>> &adj){
    visited[vertex] = true;
    // process adjacent nodes in dfs manner
    for(auto i : adj[vertex]){
        if(!visited[i]){
            topologicalSort(i, visited, st, adj);
        }
    }
    // MOST IMPORTANT STEP IF YOU ARE USING DFS TO FIND TOPO SORT
    st.push(vertex);
}

int main()
{
    // prepare a directed graph
    int v, m;
    cout<<"vertices: "<<endl;
    cin>> v;
    cout<<"edges: "<<endl;
    cin>> m;
    unordered_map<int, list<int>> adj;
    for(int i = 1; i<= m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin>> u;
        cout<<"second vertex: "<<endl;
        cin>> v;
        adj[u].push_back(v);
    }
    // detect cycle using dfs
    vector<bool> visited(v, false);
    stack<int> st;
    for(int i = 0; i< v; i++){
        if(!visited[i]){
            topologicalSort(i, visited, st, adj);
    }
    vector<int> ans;
    while(!st.empty()){
        cout<<st.top()<<" ";
        st.pop();
    }
  }
    return 0;
}

11. TOPOLOGICAL SORT USING BFS TRAVERSAL(KAHN'S ALOGORITHM):
TOPOLOGICAL SORT IS ONLY POSSIBLE IN A DIRECTED ACYCLIC GRAPH

#include <bits/stdc++.h>

using namespace std;

vector<int> topologicalSort(int n, unordered_map<int, list<int>> &adj){
    vector<int> ans;
    vector<int> indegree(n, 0);
    // prepare indegree vector
    for(int i = 0; i< n; i++){
        for(auto j : adj[i])
            indegree[j]++;
    }
    queue<int> q;
    // push all nodes in queue whose indegree is 0
    for(int i = 0; i< n; i++){
        if(indegree[i] == 0)
            q.push(i);
    }
    while(!q.empty()){
        int val = q.front();
        q.pop();
        ans.push_back(val);
        for(auto i : adj[val]){
            indegree[i]--;
            if(indegree[i] == 0)
                q.push(i);
        }
    }
    return ans;
}

int main()
{
    // prepare a directed graph
    int v, m;
    cout<<"vertices: "<<endl;
    cin>> v;
    cout<<"edges: "<<endl;
    cin>> m;
    unordered_map<int, list<int>> adj;
    for(int i = 1; i<= m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin>> u;
        cout<<"second vertex: "<<endl;
        cin>> v;
        adj[u].push_back(v);
    }
    // find topolgical sort using bfs
    vector<int> ans = topologicalSort(v, adj);
    for(auto i : ans)
        cout<<i<<" ";
}


12. FIND CYCLE IN A DIRECTED GRAPH USING BFS ALGORITHM:
NOTE - We can use the above question Kahn's algo. If we can generate topo sort then there is no cycle and if we are not able to generate topo sort then there is cycle and hence we can say that the graph contains a cycle. But this is not a good approach hence try to solve this using a dfs approach.


13. FIND SHORTEST PATH FROM SOURCE TO EVERY OTHER NODES IN AN UNDIRECTED GRAPH HAVING UNIT DISTANCE:

#include <bits/stdc++.h>

using namespace std;

void shortestPath(int src, int vertex, unordered_map<int, list<int>> &adj){
    vector<int> distance(vertex, INT_MAX);
    queue<int> q;
    q.push(src);
    distance[src] = 0;
    // process neighbouring nodes
    while(!q.empty()){
        int val = q.front();
        q.pop();
        for(auto i : adj[val]){
            if(distance[val] + 1 < distance[i]){
                distance[i] = distance[val] + 1;
                q.push(i);
            }
        }
    }
    for(auto i : distance)
        cout<<i<<" ";
}

int main()
{
    int v, m;
    cout<<"vertex: "<<endl;
    cin>>v;
    cout<<"edges: "<<endl;
    cin>>m;
    unordered_map<int, list<int>> adj;
    for(int i = 0; i<m; i++){
        int u, v;
        cout<<"first vertex: "<<endl;
        cin>> u;
        cout<<"second vertex: "<<endl;
        cin>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    // find shortest path
    
    shortestPath(0, v, adj);
    return 0;
}


14. FIND SHORTEST PATH FROM SOURCE TO EVERY OTHER NODE IN A DIRECTED GRAPH HAVING DIFFERENT WEIGHT(IMPROVE CODE QUALITY OF THIS CODE):

#include <bits/stdc++.h>

using namespace std;

void findTopoSort(int node, vector<bool> &visited, stack<int> &st, unordered_map<int, list<pair<int, int>>> &adj){
    // find topo sort
    visited[node] = true;
    for(auto i : adj[node]){
        if(!visited[i.first])
            findTopoSort(i.first, visited, st, adj);
    }
    st.push(node);
}

void findShortestPath(int src, int n, vector<int> &distance, stack<int> &st, unordered_map<int, list<pair<int, int>>> &adj){
    distance[src] = 0;
    while(!st.empty()){
        int val = st.top();
        st.pop();
        if(distance[val] != 1e9){
            for(auto i : adj[val]){
                if(distance[val] + i.second < distance[i.first])
                    distance[i.first] = distance[val] + i.second;        
                
            }
        }
    }
    for(int i = 0; i< n; i++)
        distance[i] == 1e9 ? cout<<"INF" : cout<<distance[i]<<" ";
        
}

int main()
{
    // prepare a directed weighted adj list
    int n, m;
    cout<<"vertex: "<<endl;
    cin>>n;
    cout<<"edges: "<<endl;
    cin>>m;
    unordered_map<int, list<pair<int, int>>> adj;
    for(int i = 0; i< m ; i++){
        int u, v, wt;
        cout<<"first vertex: "<<endl;
        cin>>u;
        cout<<"second vertex: "<<endl;
        cin>>v;
        cout<<"weight: "<<endl;
        cin>>wt;
        adj[u].push_back({v, wt});
    }
    vector<bool> visited(n, false);
    stack<int> st;
    for(int i =0; i< n; i++){
        if(!visited[i])
            findTopoSort(i, visited, st, adj);
    }
    vector<int> distance(n, 1e9);
    findShortestPath(0, n, distance, st, adj);
    return 0;
}


14. DIJKSHTRA'S ALGORITHM:

#include <bits/stdc++.h>

using namespace std;

void dijkstraAlgorithm(int src, int n, unordered_map<int, list<pair<int, int>>> &adj){
    vector<int> distance(n + 1, 1e9);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    distance[src] = 0;
    pq.push({src, 0});
    while(!pq.empty()){
        int node = pq.top().first;
        int dis = pq.top().second;
        pq.pop();
        for(auto i : adj[node]){
            int adjNode = i.first;
            int nextDis = i.second;
            if(dis + nextDis < distance[adjNode]){
                distance[adjNode] = dis + nextDis;
                pq.push({adjNode, distance[adjNode]});
            }
        }
    }
    for(int i = 1; i<= n; i++)
        cout<<distance[i]<<" ";
}

int main()
{
    // prepare an undirected weighted adj list
    int n, m;
    cout<<"vertex: "<<endl;
    cin>>n;
    cout<<"edges: "<<endl;
    cin>>m;
    unordered_map<int, list<pair<int, int>>> adj;
    for(int i = 0; i< m ; i++){
        int u, v, wt;
        cout<<"first vertex: "<<endl;
        cin>>u;
        cout<<"second vertex: "<<endl;
        cin>>v;
        cout<<"weight: "<<endl;
        cin>>wt;
        adj[u].push_back({v, wt});
        adj[v].push_back({u, wt});
    }
    dijkstraAlgorithm(1, n, adj);
    return 0;
}


15. IMPLEMENT PRIM'S ALGORITHM(FIND MINIMUM SPANNING TREE OF A GRAPH):

#include <bits/stdc++.h>

using namespace std;

void primsAlgorithm(int n, unordered_map<int, list<pair<int, int>>> &adj){
    vector<int> key(n, INT_MAX);
    vector<bool> mst(n, false);
    vector<int> parent(n, -1);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    parent[0] = -1;
    key[0] = 0;
    pq.push({0, 0});  // first 0 is index of array and second zero is distance to reach that index node
    
    for(int i = 0; i< n-1; i++){
        int idx = pq.top().first;
        pq.pop();
        mst[idx] = true;
        // process adjacent nodes of idx
        for(auto i : adj[idx]){
            int adjIdx = i.first;
            int dis = i.second;
            if(!mst[adjIdx] && dis < key[adjIdx]){
                key[adjIdx] = dis;
                pq.push({adjIdx, key[adjIdx]});
                parent[adjIdx] = idx; 
            }
        }
    }
    for(int i = 1; i< n; i++)
        cout<<parent[i]<<"-"<<i<<endl;
}

int main()
{
    // prepare weighted undirected graph
    int n, m;
    cout<<"vertices: "<<endl;
    cin>>n;
    cout<<"edges: "<<endl;
    cin>>m;
    unordered_map<int, list<pair<int, int>>> adj;
    for(int i = 0; i< m; i++){
        int u, v, wt;
        cout<<"first vertex: "<<endl;
        cin>>u;
        cout<<"second vertex: "<<endl;
        cin>>v;
        cout<<"weight: "<<endl;
        cin>>wt;
        adj[u].push_back({v, wt});
        adj[v].push_back({u, wt});
    }
    cout<<endl;
    primsAlgorithm(n, adj);

    return 0;
}


16. IMPLEMENT A DISJOINT SET(THIS CONCEPT WILL BE USED IN SEVERAL QUESTIONS):

#include <bits/stdc++.h>
using namespace std;
class DisjointSet {
    vector<int> rank, parent, size;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
int main() {
    DisjointSet ds(7);
    ds.unionBySize(1, 2);
    ds.unionBySize(2, 3);
    ds.unionBySize(4, 5);
    ds.unionBySize(6, 7);
    ds.unionBySize(5, 6);
    // if 3 and 7 same or not
    if (ds.findUPar(3) == ds.findUPar(7)) {
        cout << "Same\n";
    }
    else cout << "Not same\n";

    ds.unionBySize(3, 7);

    if (ds.findUPar(3) == ds.findUPar(7)) {
        cout << "Same\n";
    }
    else cout << "Not same\n";
    return 0;
}


17. IMPLEMENT KRUSKAL'S ALGORITHM(CODE IS GIVING ERROR, SEEL LATER):

#include <iostream>

using namespace std;

class Temp{
    public:
        int u, v, wt;
    Temp(int u, int v, int wt){
        u = u;
        v= v;
        wt = wt;
    }    
};

bool comp(Temp a, Temp b){
    return a.wt < b.wt;
}

int findParent(int u, vector<int> &parent){
    if(u == parent[u])
        return u;
    return parent[u] = findParent(parent[u], parent);    
}

void uniona(int u, int v, vector<int> &parent, vector<int> &ranka){
    int x = findParent(u, parent);
    int y = findParent(v, parent);
    
    if(ranka[x] > ranka[y])
        parent[y] = x;
    else if(ranka[y] > ranka[x])
        parent[x] = y;
    else{
       parent[x] = y;
       ranka[y]++;
    }
}

int main()
{
    int n, m;
    cin>>n>>m;
    vector<Temp> v;
    for(int i = 0; i< m; i++){
        int u, v, wt;
        cin>>u>>v>>wt;
        Temp obj = new Temp(u, v, wt);
        v.push_back(obj);
    }
    sort(v.begin(), v.end(), comp);
    vector<int> parent(n);
    vector<int> ranka(n, 0);
    for(int i = 0; i< n; i++)
        parent[i] = i;
        
    int cost = 0;
    vector<pair<int, int>> mst;
    for(auto i : v){
        if(findParent(i.u, parent) != findParent(i.v, parent)){
            cost = cost + i.wt;
            mst.push_back({i.u, i.v});
            uniona(i.u, i.v, parent, ranka);
        }
    }
    cout<<cost<<endl;
    for(auto i : mst)
        cout<<i.first<<"-"<<i.second<<endl;
    return 0;
}
1. IMPLEMENT A BINARY TREE:

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    
    return 0;
}


2. TRAVERSE A BINARY TREE USING INORDER TRAVERSAL, PRE ORDER TRAVERSAL, POST ORDER TRAVERSAL AND LEVEL ORDER TRAVERSAL:

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

void preOrderTraversal(Node* &root){
    if(root == NULL)
        return;
    cout<<root -> data<<" ";
    preOrderTraversal(root -> left);
    preOrderTraversal(root -> right);
}

void inOrderTraversal(Node* &root){
    if(root == NULL)
        return;
    preOrderTraversal(root -> left);
    cout<<root -> data<<" ";
    preOrderTraversal(root -> right);
}

void postOrderTraversal(Node* &root){
    if(root == NULL)
        return;
    preOrderTraversal(root -> left);
    preOrderTraversal(root -> right);
    cout<<root -> data<<" ";
}

void levelOrderTraversal(Node* root){
    if(root == NULL)
        return;
    queue<Node*> q;
    q.push(root);
    while(!q.empty()){
        Node* temp = q.front();
        q.pop();
        cout<< temp -> data<<" ";
        if(temp -> left)
            q.push(temp -> left);
        if(temp -> right)
            q.push(temp -> right);
    }
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    preOrderTraversal(root);
    cout<<endl;
    inOrderTraversal(root);
    cout<<endl;
    postOrderTraversal(root);
    levelOrderTraversal(root);
    return 0;
}


3. COUNT ALL LEAF NODES IN A BINARY TREE:

#include <iostream>
using namespace std;

class Node
{
public:
  int data;
  Node *left;
  Node *right;

    Node (int data)
  {
    this->data = data;
    this->left = NULL;
    this->right = NULL;
  }
};

Node *
buildTree (Node * root)
{
  cout << "enter data: " << endl;
  int data;
  cin >> data;
  root = new Node (data);

  if (data == -1)
    return NULL;
  cout << "enter a data in left of " << data << endl;
  root->left = buildTree (root->left);
  cout << "enter a data in right of " << data << endl;
  root->right = buildTree (root->right);
  return root;
}

int countLeafNodes(Node* root){
    if(root == NULL)
        return 0;
    if(root -> left == NULL && root -> right == NULL)  
        return 1;
    return countLeafNodes(root -> left) + countLeafNodes(root -> right);
}

int main ()
{
  Node *root = NULL;
  root = buildTree (root);
  cout<<countLeafNodes(root);
  
  return 0;
}



4. FIND HEIGHT OF A BINARY TREE:

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

int findHeightOfTree(Node* &root){
    if(root == NULL)
        return 0;
    return max(findHeightOfTree(root -> left), findHeightOfTree(root -> right)) + 1;    
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    cout<<findHeightOfTree(root);
    return 0;
}


5. FIND DIAMETER OF A BINARY TREE:

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

pair<int, int> findDiameterOfTree(Node* root){
    // first element of pair is diameter and other is height
    if(root == NULL){
        pair<int, int> p = make_pair(0, 0);
        return p;
    }
    pair<int, int> leftSubtree = findDiameterOfTree(root -> left);
    pair<int, int> rightSubtree = findDiameterOfTree(root -> right);
    
    // taking diameter of left and right sub tree
    int wholeTree = leftSubtree.second + rightSubtree.second + 1;

    // taking diameter of left subtree
    int choiceOne = leftSubtree.first;

    // taking diameter of right subtree
    int choiceTwo = rightSubtree.first;
    
    pair<int, int> ans;
    ans.first = max(wholeTree, max(choiceOne, choiceTwo));
    ans.second = max(leftSubtree.second, rightSubtree.second) + 1;
    return ans;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    cout<<findDiameterOfTree(root).first;
    return 0;
}


6. CHECK IF HEIGHT OF A TREE IS BALANCED OR NOT(DIFFERENCE B/W HEIGHT OF LEFT AND RIGHT SUBTREE IS NOT MORE THAN 1):

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

pair<bool, int> checkForBalancedTree(Node* root){
    if(root == NULL){
        pair<bool, int> p = make_pair(true, 0);
        return p;
    }
    pair<bool, int> leftSubtree = checkForBalancedTree(root -> left);
    pair<bool, int> rightSubtree = checkForBalancedTree(root -> right);
    
    bool leftAnswer = leftSubtree.first;
    bool rightAnswer = rightSubtree.first;
    
    bool height_difference = abs(leftSubtree.second - rightSubtree.second) <= 1;
    
    pair<bool, int> ans;
    ans.second = max(leftSubtree.second, rightSubtree.second) + 1;
    
    if(leftAnswer && rightAnswer && height_difference)
        ans.first = true;
    else
        ans.first = false;
    return ans;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    cout<<checkForBalancedTree(root).first;
    return 0;
}


7. CHECK IF TWO TREES ARE IDENTICAL OR NOT:

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

bool isTwoTreeIdentical(Node* r1, Node* r2){
    if(r1 == NULL && r2 == NULL)
        return true;
    if(r1 != NULL && r2 == NULL)
        return false;
    if(r1 == NULL && r2 != NULL)
        return false;
    bool isLeftIdentical = isTwoTreeIdentical(r1 -> left, r2 -> left);  
    bool isRightIdentical = isTwoTreeIdentical(r1 -> right, r2 -> right);
    bool isDataIdentical = r1 -> data == r2 -> data;
    
    if(isLeftIdentical && isRightIdentical && isDataIdentical)
        return true;
    return false;    
}

int main() {
    Node* root1 = NULL;
    root1 = buildTree(root1);
    
    cout<<"first completed"<<endl;
    
    Node* root2 = NULL;
    root2 = buildTree(root2);
    cout<<"second completed"<<endl;
    
    cout<<isTwoTreeIdentical(root1, root2)<<endl;
    return 0;
}


8. CHECK IF BINARY TREE IS SUM TREE OR NOT:

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

pair<bool, int> isSumTree(Node* root){
    if(root == NULL){
        pair<bool, int> p = make_pair(true, 0);
        return p;
    }    
    if(root -> left == NULL && root -> right == NULL){
        pair<bool, int> p = make_pair(true, root -> data);
        return p;
    }
    pair<bool, int> isLeftSumTree = isSumTree(root -> left);
    pair<bool, int> isRightSumTree = isSumTree(root -> right);
    
    bool isLeftSum = isLeftSumTree.first;
    bool isRightSum = isRightSumTree.first;
    bool isSum = root -> data == isLeftSumTree.second + isRightSumTree.second;
    pair<bool, int> ans;
    
    if(isLeftSum && isRightSum && isSum){
        ans.first = true;
        ans.second = 2 * root -> data;
    }
    else
        ans.first = false;
    return ans;    
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    
    cout<<isSumTree(root).first<<endl;
    return 0;
}


9. ZIGZAG(SPIRAL) TRAVERSAL OF A TREE:

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

vector<int> zigZagTraversal(Node* root){
    vector<int> v;
    if(root == NULL)
        return v;
    
    queue<Node*> q;
    q.push(root);
    bool isLeftToRight = true;
    while(!q.empty()){
        int size = q.size();
        vector<int> ans(size);
        for(int i = 0; i< size; i++){
            Node* temp = q.front();
            q.pop();
            int index = (isLeftToRight) ? (i) : (size - i - 1);
            ans[index] = temp -> data;
            
            if(temp -> left)
                q.push(temp -> left);
            if(temp -> right)
                q.push(temp -> right);
        }
        isLeftToRight = !isLeftToRight;
        for(auto i : ans)
            v.push_back(i);
    }
    return v;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    vector<int> res = zigZagTraversal(root);
    for(int i = 0; i<res.size(); i++)
        cout<<res[i]<<" ";
    return 0;
}


10. FIND BOUNDARY TRAVERSAL OF A TREE:

#include <iostream>
#include <vector>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

void traverseLeftNodes(Node* root, vector<int> &v){
    if(root == NULL || root -> left == NULL && root -> right == NULL)
        return;
    v.push_back(root -> data);
    if(root -> left)
        traverseLeftNodes(root -> left, v);
    else
        traverseLeftNodes(root -> right, v);
}

void traverseLeafNodes(Node* root, vector<int> &v){
    if(root == NULL)
        return;
    if(root -> left == NULL && root -> right == NULL){
        v.push_back(root -> data);
        return;
    }
    traverseLeafNodes(root -> left, v);    
    traverseLeafNodes(root -> right, v);
}

void traverseRightNodes(Node* root, vector<int> &v){
    if(root == NULL || root -> left == NULL && root -> right == NULL)
        return;
    if(root -> right)
        traverseRightNodes(root -> right, v);
    else
        traverseRightNodes(root -> left, v);
    v.push_back(root -> data);    
}

vector<int> boundaryTraversal(Node* root){
    vector<int> v;
    if(root == NULL)
        return v;
    
    v.push_back(root -> data);
    traverseLeftNodes(root -> left, v);
    traverseLeafNodes(root -> left, v);
    traverseLeafNodes(root -> right, v);
    traverseRightNodes(root -> right, v);
    
    return v;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    vector<int> res = boundaryTraversal(root);
    for(int i = 0; i<res.size(); i++)
        cout<<res[i]<<" ";
    return 0;
}


11. FIND THE LEFT VIEW OF A TREE:

#include <iostream>
#include <vector>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

vector<int> leftViewOfTree(Node* root, int level, vector<int> &v){
    if(root == NULL)
        return v;
    if(level == v.size())
        v.push_back(root -> data);
        
    leftViewOfTree(root -> left, level + 1, v);
    leftViewOfTree(root -> right, level + 1, v);
    return v;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    vector<int> ans;
    int level = 0;
    vector<int> res = leftViewOfTree(root, level, ans);
    for(int i = 0; i<res.size(); i++)
        cout<<res[i]<<" ";
    return 0;
}


12. FIND A RIGHT VIEW OF A TREE:

#include <iostream>
#include <vector>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

vector<int> rightViewOfTree(Node* root, int level, vector<int> &v){
    if(root == NULL)
        return v;
    if(level == v.size())
        v.push_back(root -> data);
        
    rightViewOfTree(root -> right, level + 1, v);
    rightViewOfTree(root -> left, level + 1, v);
    return v;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    vector<int> ans;
    int level = 0;
    vector<int> res = rightViewOfTree(root, level, ans);
    for(int i = 0; i<res.size(); i++)
        cout<<res[i]<<" ";
    return 0;
}


13. FIND THE TOP VIEW OF A TREE:

#include <iostream>
#include <vector>
#include <map>
#include <queue>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

vector<int> topViewOfTree(Node* root){
    vector<int> v;
    if(root == NULL)
        return v;
    // map holds horizontal distance as key and nodes's data as value
    map<int, int> mapping;
    queue<pair<Node*, int>> q;
    q.push(make_pair(root, 0));
    
    while(!q.empty()){
        pair<Node*, int> p = q.front();
        q.pop();
        Node* temp = p.first;
        int horizontal_distance = p.second;
        
        if(mapping.find(horizontal_distance) == mapping.end())
            mapping[horizontal_distance] = temp -> data;
        if(temp -> left)
            q.push(make_pair(temp -> left, horizontal_distance - 1));
        if(temp -> right)
            q.push(make_pair(temp -> right, horizontal_distance + 1));
    }
    for(auto i : mapping)
        v.push_back(i.second);
    return v;    
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    
    vector<int> res = topViewOfTree(root);
    for(int i = 0; i<res.size(); i++)
        cout<<res[i]<<" ";
    return 0;
}


14. FIND BOTTOM VIEW OF A TREE:

#include <iostream>
#include <vector>
#include <map>
#include <queue>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

vector<int> bottomViewOfTree(Node* root){
    vector<int> v;
    if(root == NULL)
        return v;
    map<int, int> mapping;
    queue<pair<Node*, int>> q;
    q.push(make_pair(root, 0));
    
    while(!q.empty()){
        pair<Node*, int> p = q.front();
        q.pop();
        Node* temp = p.first;
        int horizontal_distance = p.second;
        mapping[horizontal_distance] = temp -> data;
        
        if(temp -> left)
            q.push(make_pair(temp -> left, horizontal_distance - 1));
        if(temp -> right)
            q.push(make_pair(temp -> right, horizontal_distance + 1));
    }
    for(auto i : mapping)
        v.push_back(i.second);
    return v;    
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    
    vector<int> res = bottomViewOfTree(root);
    for(int i = 0; i<res.size(); i++)
        cout<<res[i]<<" ";
    return 0;
}


15 FIND VERTICAL TRAVERSAL OF A TREE[NESTED DATA STRUCTURE IS USED, HENCE LITTLE COMPLICATED]:

#include <iostream>
#include <vector>
#include <map>
#include <queue>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

vector<int> verticalTraversalOfTree(Node* root){
    vector<int> v;
    if(root == NULL)
        return v;
    map<int, map<int, vector<int>>> mapping;
    queue<pair<Node*, pair<int, int>>> q;
    q.push(make_pair(root, make_pair(0, 0)));
    
    while(!q.empty()){
        pair<Node*, pair<int, int>> p = q.front();
        q.pop();
        Node* temp = p.first;
        int horizontal_distance = p.second.first;
        int level = p.second.second;
        
        mapping[horizontal_distance][level].push_back(temp -> data);
        
        if(temp -> left)
            q.push(make_pair(temp -> left, make_pair(horizontal_distance - 1, level + 1)));
        if(temp -> right)
            q.push(make_pair(temp -> right, make_pair(horizontal_distance + 1, level + 1)));
    }
    for(auto i : mapping)
        for(auto j : i.second)
            for(auto k : j.second)
                v.push_back(k);
    return v;    
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    
    vector<int> res = verticalTraversalOfTree(root);
    for(int i = 0; i<res.size(); i++)
        cout<<res[i]<<" ";
    return 0;
}


16. FIND SUM OF A LONGEST BLOODLINE OF A TREE (SUM OF THE NODES ON THE LONGEST PATH FROM ROOT TO LEAF NODE):

#include <iostream>
#include <climits>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

void longestPathInBloodline(Node* root, int sum, int length, int &maxSum, int &maxLength){
    if(root == NULL){
        if(length > maxLength){
            maxLength = length;
            maxSum = sum;
        }
        if(length == maxLength)
            maxSum = max(sum, maxSum);
        return;    
    }
    sum += root -> data;
    longestPathInBloodline(root -> left, sum, length + 1, maxSum, maxLength);
    longestPathInBloodline(root -> right, sum, length + 1, maxSum, maxLength);
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    int sum = 0, length = 0, maxSum = INT_MIN, maxLength = 0;
    longestPathInBloodline(root, sum, length, maxSum, maxLength);
    cout<<maxLength<<endl;
    cout<<maxSum<<endl;
    return 0;
}


17. FIND LCA(LOWEST COMMON ANCESTOR) OF A TREE:

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

Node* findLcaOfTree(Node* root, int n1, int n2){
    if(root == NULL)
        return NULL;
    if(root -> data == n1 || root -> data == n2)
        return root;
    
    Node* left = findLcaOfTree(root -> left, n1, n2);
    Node* right = findLcaOfTree(root -> right, n1, n2);
    
    if(left != NULL && right != NULL)
        return root;
    else if(left != NULL && right == NULL)
        return left;
    else if(left == NULL && right != NULL)
        return right;
    else
        return NULL;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    int n1 = 3, n2 = 4;
    Node* ans = findLcaOfTree(root, n1, n2);
    cout<<ans -> data<<endl;
    return 0;
}


18. FIND K SUM PATH:

#include <iostream>
#include <vector>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

void findKSumPathOfTree(Node* root, int k, int &count, vector<int> v){
    if(root == NULL){
        return;
    }
    v.push_back(root -> data);
    findKSumPathOfTree(root -> left, k, count, v);
    findKSumPathOfTree(root -> right, k, count, v);
    
    int sum = 0;
    for(int i = v.size() - 1; i>= 0; i--){
        sum = sum + v[i];
        if(sum == k)
            count++;
     }
     v.pop_back();
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    vector<int> v;
    int k = 3, count = 0;
    findKSumPathOfTree(root, k, count, v);
    cout<<count<<endl;
    return 0;
}


19. FIND Kth ANCESTOR OF A NODE IN BINARY TREE(K VALUE WILL START FROM 1):

#include <iostream>
#include <climits>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

Node* findKAncestorOfNode(Node* root, int &k, int node){
    if(root == NULL){
        return NULL;
    }
    if(root -> data == node)
        return root;    
        
    Node* left = findKAncestorOfNode(root -> left, k, node);
    Node* right = findKAncestorOfNode(root -> right, k, node);
    
    if(left != NULL && right == NULL){
        k--;
        if(k <= 0){
            k = INT_MAX;
            return root;
        }
        return left;
    }
    else if(left == NULL && right != NULL){
        k--;
        if(k <= 0){
            k = INT_MAX;
            return root;
        }
        return right;
    }
    else
        return NULL;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    int k = 2, node = 5;
    Node* ans = findKAncestorOfNode(root, k, node);
    if(ans == NULL || ans -> data == node)
        cout<<"Not available"<<endl;
    else    
        cout<<ans -> data<<endl;
    return 0;
}


20. FIND MAXIMUM SUM OF NON ADJACENT NODES IN A BINARY TREE:

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;cx
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

pair<int, int> maxSumOfNonAdjacentNodes(Node* root){
    if(root == NULL){
        pair<int, int> p = make_pair(0, 0);
        return p;
    }
    pair<int, int> leftAns = maxSumOfNonAdjacentNodes(root -> left);
    pair<int, int> rightAns = maxSumOfNonAdjacentNodes(root -> right);
    
    pair<int, int> res;
    res.first = root -> data + leftAns.second + rightAns.second;
    res.second = max(leftAns.first, leftAns.second) + max(rightAns.first, rightAns.second);
    return res;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    pair<int, int> ans = maxSumOfNonAdjacentNodes(root);
    cout<<ans.first<<" "<<ans.second;
    return 0;
}


21. CONSTRUCT A TREE FROM INORDER AND PREORDER TRAVERSAL:

#include <iostream>
#include <map>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

void createMap(map<int, int> &mapping, int inOrder[], int size){
    for(int i = 0; i<size; i++)
        mapping[inOrder[i]] = i;
}

Node* constructTree(int inOrder[], int preOrder[], int size, map<int, int> &mapping, int &index, int start, int end){
    if(index >= size || start > end)
        return NULL;
    int element = preOrder[index++];
    Node* root = new Node(element);
    int position = mapping[element];
    
    root -> left = constructTree(inOrder, preOrder, size, mapping, index, start, position - 1);
    root -> right = constructTree(inOrder, preOrder, size, mapping, index, position + 1, end);
    return root;
}

void postOrderTraversal(Node* &root){
    if(root == NULL)
        return;
    postOrderTraversal(root -> left);
    postOrderTraversal(root -> right);
    cout<<root -> data<<" ";
}

int main() {
    int inOrder[] = {3,1,4,0,5,2};
    int preOrder[] = {0,1,3,4,2,5};
    int size = sizeof(inOrder) / sizeof(inOrder[0]), index = 0, start = 0, end = size - 1;
    map<int, int> mapping;
    
    createMap(mapping, inOrder, size);
    Node* root = constructTree(inOrder, preOrder, size, mapping, index, start, end);
    postOrderTraversal(root);
    return 0;
}


22. CONSTRUCT A TREE FROM INORDER AND POSTORDER TRAVERSAL:

#include <iostream>
#include <map>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

void createMap(map<int, int> &mapping, int inOrder[], int size){
    for(int i = 0; i<size; i++)
        mapping[inOrder[i]] = i;
}

Node* constructTree(int inOrder[], int postOrder[], int size, map<int, int> &mapping, int &index, int start, int end){
    if(index < 0 || start > end)
        return NULL;
    int element = postOrder[index--];
    Node* root = new Node(element);
    int position = mapping[element];
    
    root -> right = constructTree(inOrder, postOrder, size, mapping, index, position + 1, end);
    root -> left = constructTree(inOrder, postOrder, size, mapping, index, start, position - 1);
    return root;
}

void preOrderTraversal(Node* &root){
    if(root == NULL)
        return;
    cout<<root -> data<<" ";
    preOrderTraversal(root -> left);
    preOrderTraversal(root -> right);
}

int main() {
    int inOrder[] = {9,5,2,3,4};
    int postOrder[] = {5,9,3,4,2};
    int size = sizeof(inOrder) / sizeof(inOrder[0]), index = size - 1, start = 0, end = size - 1;
    map<int, int> mapping;
    
    createMap(mapping, inOrder, size);
    Node* root = constructTree(inOrder, postOrder, size, mapping, index, start, end);
    preOrderTraversal(root);
    return 0;
}


23 MINIMUM TIME TO BURN A BINARY TREE:

#include <iostream>
#include <queue>
#include <map>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

Node* createMap(map<Node*, Node*> &childToParent, Node* root, int target){
    childToParent[root] = NULL;
    Node* node = NULL;
    queue<Node*> q;
    q.push(root);
    while(!q.empty()){
        Node* temp = q.front();
        q.pop();
        if(target == temp -> data)
            node = temp;
        if(temp -> left){
            childToParent[temp -> left] = temp;
            q.push(temp -> left);
        }
        if(temp -> right){
            childToParent[temp -> right] = temp;
            q.push(temp -> right);
        }
    }
    return node;
}

int burningTree(Node* targetNode, map<Node*, Node*> &childToParent){
    int timeToBurn = 0;
    queue<Node*> q;
    map<Node*, bool> isVisited;
    q.push(targetNode);
    isVisited[targetNode] = true;
    
    while(!q.empty()){
        bool flag = false;
        int size = q.size();
        for(int i = 0; i< size; i++){
            Node* temp = q.front();
            q.pop();
            
            if(childToParent[temp] && !isVisited[childToParent[temp]]){
                flag = true;
                q.push(childToParent[temp]);
                isVisited[childToParent[temp]] = true;
            }
            if(temp -> left && !isVisited[temp -> left]){
                flag = true;
                q.push(temp -> left);
                isVisited[temp -> left] = true;
            }
            if(temp -> right && !isVisited[temp -> right]){
                flag = true;
                q.push(temp -> right);
                isVisited[temp -> right] = true;
            }
        }
        if(flag)
            timeToBurn++;
    }
    return timeToBurn;
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    
    int target = 10;
    map<Node*, Node*> childToParent;
    Node* targetNode = createMap(childToParent, root, target);
    cout<<burningTree(targetNode, childToParent);
    return 0;
}


24. MORRIS TRAVERSAL OF A TREE(NODES WILL BE PRINTED IN INORDER):

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

void morrisTraversalOfTree(Node* root){
    if(root == NULL)
        return;
        
    Node* current = root;
    while(current){
        if(current -> left == NULL){
            cout<<current -> data<<" ";
            current = current -> right;
        }
        else{
            Node* predecessor = current -> left;
            while(predecessor -> right && predecessor -> right != current)
                predecessor = predecessor -> right;
	    // ADDING LINKS TO BUILT OUR SOLUTION
            if(predecessor -> right == NULL){
                predecessor -> right = current;
                current = current -> left;
            }
	    // REMOVING LINKS TO FORM ORIGINAL TREE STRUCTURE BACK
            else{
                predecessor -> right = NULL;
                cout<<current -> data<<" ";
                current = current -> right;
            }
        }
    }
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    morrisTraversalOfTree(root);
    return 0;
}


25. FLATTEN A BINARY TREE INTO A LINKED LIST:

#include <iostream>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
    Node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }    
};

Node* buildTree(Node* root){
    cout<<"enter data: "<<endl;
    int data;
    cin>> data;
    root = new Node(data);
    
    if(data == -1)
        return NULL;
    cout<<"enter a data in left of "<<data<<endl;
    root -> left = buildTree(root -> left);
    cout<<"enter a data in right of "<<data<<endl;
    root -> right = buildTree(root -> right);
    return root;
}

Node* flattenTreeIntoLinkedList(Node* root){
    if(root == NULL)
        return NULL;
    Node* current = root;
    while(current){
        if(current -> left){
            Node* predecessor = current -> left;
            while(predecessor -> right)
                predecessor = predecessor -> right;
            predecessor -> right = current -> right;
            current -> right = current -> left;
            current -> left = NULL;
        }
        current = current -> right;
    }
    return root;
}

void printList(Node* head){
    Node* temp = head;
    while(temp){
        cout<<temp -> data<<"->";
        temp = temp -> right;
    }
    cout<<"NULL";
}

int main() {
    Node* root = NULL;
    root = buildTree(root);
    Node* ans = flattenTreeIntoLinkedList(root);
    printList(ans);
    return 0;
}

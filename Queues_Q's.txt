1. IMPLEMENT QUEUE USING AN ARRAY:

#include <iostream>
using namespace std;

class Queue{
    public:
        int *arr;
        int size;
        int front;
        int rear;
    
    Queue(int size){
        this -> size = size;
        arr = new int[size];
        front = 0;
        rear = 0;
    }
    
    bool push(int data){
        if(rear == size)
            return false;
        arr[rear] = data;
        rear++;
        return true;
    }
    
    int pop(){
        if(front == rear)
            return -1;
        int data = arr[front];
        arr[front] = -1;
        front++;
        if(front == rear)
            front = rear = 0;
        return data;
    }
    
    bool isEmpty(){
        if(front == rear)
            return true;
        return false;    
    }
    
    int getFront(){
        if(front == rear)
            return -1;
        return arr[front];    
    }
};

int main() {
    Queue q(5);
    cout<<q.push(10)<<endl;
    cout<<q.push(20)<<endl;
    cout<<q.push(30)<<endl;
    cout<<q.push(40)<<endl;
    cout<<q.isEmpty()<<endl;
    cout<<q.getFront()<<endl;
    cout<<q.push(50)<<endl;
    cout<<q.push(60)<<endl;
    cout<<q.pop()<<endl;
    cout<<q.pop()<<endl;
    cout<<q.getFront()<<endl;
    cout<<q.pop()<<endl;
    cout<<q.pop()<<endl;
    cout<<q.pop()<<endl;
    cout<<q.pop()<<endl;
    cout<<q.getFront()<<endl;
    cout<<q.isEmpty()<<endl;
    cout<<q.push(10)<<endl;
    cout<<q.getFront()<<endl;
    return 0;
}


2. IMPLEMENT CIRCULAR QUEUE:

#include <iostream>
using namespace std;

class CircularQueue{
    public:
        int *arr;
        int size;
        int front;
        int rear;
    
    CircularQueue(int size){
        this -> size = size;
        arr = new int[size];
        front = -1;
        rear = -1;
    }
    
    bool push(int data){
        // ALREADY FULL
        if((front == 0 && rear == size - 1) || (rear + 1) % size == front)
            return false;
        // FIRST TIME INSERTING
        else if(front == -1){ 
            rear = front = 0;
            arr[rear] = data;
        }
        // MAINTAIN CYCLIC NATURE
        else if(rear == size - 1 && front != 0){
            rear = 0;
            arr[rear] = data;
        }
        //NORMAL FLOW
        else{    
        rear++;
        arr[rear] = data;
        }
        return true;
    }
    
    int pop(){
        //ALREADY EMPTY
        if(front == -1)
            return -1;
        int data = arr[front];
        arr[front] = -1;
        // SINGLE ELEMENT TO DELETE 
        if(front == rear)
            front = rear = -1;
        // MAINTAIN CYCLIC NATURE
        else if(front == size - 1)
            front = 0;
        // NORMAL FLOW
        else   
            front++;
        return data;
    }
};

int main() {
    CircularQueue q(5);
    cout<<q.push(10)<<endl;
    cout<<q.push(20)<<endl;
    cout<<q.push(30)<<endl;
    cout<<q.push(40)<<endl;
    
    
    cout<<q.push(50)<<endl;
    cout<<q.push(60)<<endl;
    cout<<q.pop()<<endl;
    cout<<q.pop()<<endl;
    
    cout<<q.pop()<<endl;
    cout<<q.pop()<<endl;
    cout<<q.pop()<<endl;
    cout<<q.pop()<<endl;
    
    cout<<q.push(10)<<endl;
    
    return 0;
}


3. IMPLEMENT DOUBLY ENDED CIRCULAR QUEUE(CODE IS NOT CORRECT NOW, BUT TRY TO SEE IT LATER):

#include <iostream>
using namespace std;

class CircularQueue{
    public:
        int *arr;
        int size;
        int front;
        int rear;
    
    CircularQueue(int size){
        this -> size = size;
        arr = new int[size];
        front = -1;
        rear = -1;
    }
    
    bool isFull(){
        if((front == 0 && rear == size - 1) || front != 0 && rear == (front - 1) % size - 1)
            return true;
        return false;    
    }
    
    bool isEmpty(){
        if(front == -1)
            return true;
        return false;    
    }
    
    bool pushFront(int data){
        if(isFull())
            return false;
        // FIRST ELEMENT TO INSERT
        else if(front == -1){ 
            rear = front = 0;
            arr[front] = data;
        }
        // CYCLIC NATURE
        else if(front == 0 && rear != size -1){
            front = size - 1;
            arr[front] = data;
        }
        // NORMAL FLOW
        else{    
            front--;
            arr[front] = data;
        }
        return true;
    }
    
    // POPFRONT IS SAME AS NORMAL POP OPERATION IN CIRCULAR QUEUE
    int popFront(){
        if(isEmpty())
            return -1;
        int data = arr[front];
        arr[front] = -1; 
        // SINGLE ELEMENT TO DELELTE
        if(front == rear)
            front = rear = -1;
        // MAINTAIN CYCLIC NATURE
        else if(front == size - 1)
            front = 0;
        else   
            front++;
        return data;
    }
    
    // PUSHBACK OPEARTION IS SAME AS NORMAL PUSH OPERATION IN CIRCULAR QUEUE
    bool pushBack(int data){
        if(isFull())
            return false;
        else if(front == -1)
            rear = front = 0;
        else if(rear == size - 1 && front != 0)
            rear = 0;
        else
            rear++;
        arr[rear] = data;
        return true;
    }
    
    int popBack(){
        if(isEmpty())
            return -1;
        int data = arr[rear];
        arr[rear] = -1;
        if(front == rear)
            front = rear = -1;
        else if(rear == 0)
            rear = size - 1;
        else
            rear--;
        return data;    
    }
};

int main() {
    CircularQueue q(5);
    cout<<q.pushFront(10)<<endl;
    cout<<q.pushFront(20)<<endl;
    cout<<q.pushBack(30)<<endl;
    cout<<q.pushBack(40)<<endl;
    
    
    cout<<q.pushFront(50)<<endl;
    cout<<q.pushBack(60)<<endl;
    cout<<q.popFront()<<endl;
    cout<<q.popFront()<<endl;
    
    cout<<q.popBack()<<endl;
    cout<<q.popBack()<<endl;
    cout<<q.popFront()<<endl;
    cout<<q.popBack()<<endl;
    
    cout<<q.pushBack(10)<<endl;
    
    return 0;
}


4. REVERSE A QUEUE:

#include <iostream>
#include <queue>
#include <stack>
using namespace std;

int main() {
    queue<int> q;
    stack<int> st;
    q.push(4);
    q.push(8);
    q.push(2);
    q.push(5);
    q.push(1);
    while(!q.empty()){
        int data = q.front();
        q.pop();
        st.push(data);
    }
    while(!st.empty()){
        int data = st.top();
        st.pop();
        q.push(data);
    }
    cout<<q.front()<<endl;
    cout<<q.back()<<endl;
    return 0;
}


5. REVERSE QUEUE UPTO FIRST K ELEMENTS:

#include <iostream>
#include <queue>
#include <stack>
using namespace std;

queue<int> reverseFirstK(queue<int> q, int k){
    stack<int> st;
    for(int i = 0; i< k;i++){
        int val = q.front();
        q.pop();
        st.push(val);
    }
    while(!st.empty()){
        int val = st.top();
        st.pop();
        q.push(val);
    }
    int size = q.size() - k;
    for(int i = 0; i< size; i++){
        int val = q.front();
        q.pop();
        q.push(val);
    }
    return q;
}

int main() {
    queue<int> q;
    q.push(2);
    q.push(4);
    q.push(6);
    q.push(8);
    q.push(10);
    q.push(12);
    int k = 3;
    queue<int> ans = reverseFirstK(q, k);
    cout<<ans.front()<<endl;
    cout<<ans.back();
    return 0;
}


6. FIND FIRST NEGATIVE INTEGER IN EVERY WINDOW OF SIZE K (SLIDING WINDOW TYPE PROBLEM):

#include <iostream>
#include <deque>
#include <vector>
using namespace std;

int main() {
    int arr[] = {-8, 2, 3, -6, 10};
    int size = sizeof(arr) / sizeof(arr[0]);
    int k = 2;
    vector<int> v;
    deque<int> deq;
    // PROCESS FIRST WINDOW OF SIZE K
    for(int i = 0; i< k; i++){
        if(arr[i] < 0)
            deq.push_back(i);
      }
    if(deq.size() > 0)
        v.push_back(arr[deq.front()]);
    else
        v.push_back(0);
     
    // PROCESS REMAINING WINDOWS
    for(int i = k; i< size; i++){
	// IF DEQUE SIZE IS GREATER THEN K THEN POP IT FROM FRONT SO THAT AT ANY TIME OUR DEQUE WILL CONTAIN ONLY CURRENT WINDOW INDEXES
        if(!deq.empty() && i - deq.front() >= k)
            deq.pop_front();
        if(arr[i] < 0)
            deq.push_back(i);
        if(deq.size() > 0)
            v.push_back(arr[deq.front()]);
        else
            v.push_back(0);
    }
    for(int i = 0; i< v.size(); i++)
        cout<<v[i]<<" ";
    return 0;
}


7. FIND FIRST NON REPEATING CHARACTER IN A STREAM:

#include <iostream>
#include <queue>
#include <unordered_map>
using namespace std;

int main() {
    string str = "aabc", ans = "";
    queue<int> q;
    unordered_map<char, int> mapping;
    for(int i = 0; i< str.length(); i++){
        char ch = str[i];
        mapping[ch]++;
        q.push(ch);
        while(!q.empty()){
            if(mapping[q.front()] > 1){
                q.pop();
            }
            else{
                ans.push_back(q.front());
                break;
            }
        }
        if(q.empty())
            ans.push_back('#');
    }
    cout<<ans<<endl;
    return 0;
}


8. (A) INTERLEAVE FIRST HALF OF A QUEUE WITH ANOTHER HALF(USING QUEUE):

#include <iostream>
#include <queue>
using namespace std;
int main() {
    queue<int> q; 
    queue<int> tempQ;
    q.push(11);
    q.push(12);
    q.push(13);
    q.push(14);
    q.push(15);
    q.push(16);
    q.push(17);
    q.push(18);
    q.push(19);
    q.push(20);
    int size = q.size();
    for(int i = 0; i< size / 2; i++){
        tempQ.push(q.front());
        q.pop();
    }
    while(!tempQ.empty()){
        int val1 = tempQ.front();
        tempQ.pop();
        q.push(val1);
        val1 = q.front();
        q.pop();
        q.push(val1);
    }
    cout<<q.front()<<endl;
    q.pop();
    cout<<q.front()<<endl;
    q.pop();
    cout<<q.front()<<endl;
    q.pop();
    cout<<q.front()<<endl;
    return 0;
}


(B) INTERLEAVE FIRST HALF OF QUEUE WITH ANOTHER HALF (USING STACK):

#include <iostream>
#include <queue>
#include <stack>
using namespace std;
int main() {
    queue<int> q; 
    stack<int> st;
    q.push(11);
    q.push(12);
    q.push(13);
    q.push(14);
    q.push(15);
    q.push(16);
    q.push(17);
    q.push(18);
    q.push(19);
    q.push(20);
    int size = q.size();
    for(int i = 0; i< size / 2; i++){
        st.push(q.front());
        q.pop();
    }
    while(!st.empty()){
        int val1 = st.top();
        st.pop();
        q.push(val1);
    }
    for(int i = 0; i< size / 2; i++){
        int val = q.front();
        q.pop();
        q.push(val);
    }
    for(int i = 0; i< size / 2; i++){
        st.push(q.front());
        q.pop();
    }
    while(!st.empty()){
        int val = st.top();
        st.pop();
        q.push(val);
        val = q.front();
        q.pop();
        q.push(val);
    }
    cout<<q.front()<<endl;
    q.pop();
    cout<<q.front()<<endl;
    q.pop();
    cout<<q.front()<<endl;
    q.pop();
    cout<<q.front()<<endl;
    q.pop();
    cout<<q.front()<<endl;
    q.pop();
    cout<<q.front()<<endl;
    return 0;
}


9. IMPLEMENT 'K' QUEUES IN AN ARRAY:

#include <iostream>
using namespace std;

class Queue{
    public:
        int n;
        int k;
        int *arr;
        int *front;
        int *rear;
        int *nex;
        int freespot;
    Queue(int n, int k){
        this -> n = n;
        this -> k = k;
        arr = new int[n];
        front = new int[k];
        rear = new int[k];
        
        for(int i = 0; i< k; i++){
            front[i] = -1;
            rear[i] = -1;
        }
        nex = new int[n];
        for(int i = 0; i< n; i++)
            nex[i] = i + 1;
        nex[n - 1] = -1;
        freespot = 0;
    }  
    void enQueue(int data, int qn){
        // overflow check
        if(freespot == -1){
            cout<<"Queue overflow"<<endl;
            return;
        }
        // find index and update freespot
        int index = freespot;
        freespot = nex[index];
        // check if element inserted for first time
        if(front[qn - 1] == -1)
            front[qn - 1] = index;
        // link first element to the next element    
        else
           nex[rear[qn - 1]] = index;
        // update nex[] to -1
        nex[index] = -1;
        // update rear[] 
        rear[qn - 1] = index;
        // insert element
        arr[index] = data;
        cout<<"successfully inserted"<<endl;
    }
    
    int deQueue(int qn){
        // check for underflow
        if(front[qn - 1] == -1){
            cout<<"Queue underflowed"<<endl;
            return -1;
        }
        // find the target index
        int index = front[qn - 1];
        // update front
        front[qn - 1] = nex[index];
        // update freespot and nex[]
        nex[index] = freespot;
        freespot = index;
        return arr[index];
    }
};

int main() {
    Queue q(10, 3);
    q.enQueue(10, 1);
    q.enQueue(15, 1);
    q.enQueue(20, 2);
    q.enQueue(25, 1);
    cout<<endl;
    cout<<q.deQueue(1)<<endl;
    cout<<q.deQueue(2)<<endl;
    cout<<q.deQueue(1)<<endl;
    cout<<q.deQueue(1)<<endl;
    cout<<q.deQueue(1);
    return 0;
}


10. CIRCULAR TOUR PROBLEM:

#include <iostream>
using namespace std;

class PetrolPumpData{
    public:
        int petrol;
        int distance;
};

int findStartingPoint(PetrolPumpData arr[], int size){
    int deficit = 0;
    int start = 0;
    int balance = 0;
    
    for(int i = 0; i< size; i++){
        balance = balance + arr[i].petrol - arr[i].distance;
        if(balance < 0){
            deficit = deficit + balance;
            start = i + 1;
            balance = 0;
        }
    }
    if(deficit + balance >= 0)
        return start;
    return -1;    
}

int main() {
    PetrolPumpData arr[] = {{6, 5}, {7, 6}, {4, 7}, {10, 8},{6, 6}, {5, 4}};
    int size = sizeof(arr) / sizeof(arr[0]);
    
    cout<<findStartingPoint(arr, size);
    return 0;
}


11. FIND SUM OF MAXIMUM AND MININMUM ELEMENTS OF A SUBARRAY OF SIZE K (SLIDING WINDOW TYPE PROBLEM)

#include <iostream>
#include <deque>
using namespace std;

int solve(int *arr, int size, int k){
    deque<int> maxi(k);
    deque<int> mini(k);
    
    // process first window
    for(int i = 0; i< k; i++){
        // finding max and min index in maxi and mini
        while(!maxi.empty() && arr[maxi.back()] <= arr[i])
            maxi.pop_back();
        while(!mini.empty() && arr[mini.back()] >= arr[i])
            mini.pop_back();
        maxi.push_back(i);
        mini.push_back(i);
    }
    // answer of first window
    int ans = 0;
    ans = ans + arr[maxi.front()] + arr[mini.front()];
    
    // process remaining windows
    for(int i = k; i < size; i++){
        // slide the window to next element of maxi and mini
        while(!maxi.empty() && i - maxi.front() >= k)
            maxi.pop_front();
        while(!mini.empty() && i - mini.front() >= k)
            mini.pop_front();
        // finding max and min index in remaining maxi and mini   
        while(!maxi.empty() && arr[maxi.back()] <= arr[i])
            maxi.pop_back();
        while(!mini.empty() && arr[mini.back()] >= arr[i])
            mini.pop_back();
        maxi.push_back(i);
        mini.push_back(i);   
        // answer of each window iteratively
        ans = ans + arr[maxi.front()] + arr[mini.front()];
    }
    return ans;
}

int main() {
    int arr[] = {2,5,-1,7,-3,-1,2};
    int k = 4;
    int size = sizeof(arr) / sizeof(arr[0]);
    
    cout<<solve(arr, size, k);

    return 0;
}